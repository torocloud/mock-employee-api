{
    "authTypes": [
        "BASIC"
    ],
    "groups": [
        "ESBAPIAdminGroup"
    ],
    "info": {
        "title": "Mock Employee API",
        "description": "This is a non-production employees REST API server, it aims to be used for mocking or testing APIs. \n\n### Sending Authenticated Requests\n\nYou can use your ECC account to send authenticated request to the API. Your ECC credentials must be sent in the `Authorization` header in the HTTP request\n\n#### To authenticate a request with basic authentication\n\n1. Combine your email and password with a colon (`:`). e.g. `jdoe@mailinator.com:pa$$w0rd`\n2. Encode the resulting string in Base64\n3. Include an Authorization header in the HTTP request containing the base64-encoded string. Example: ```\nAuthorization: Basic amRvZUBtYWlsaW5hdG9yLmNvbTpwYSQkdzByZA==```",
        "contact": {
            "name": "TORO Cloud",
            "url": "https://support.torocloud.com"
        },
        "license": {
            "name": "MIT"
        },
        "version": "1.0.0-SNAPSHOT"
    },
    "basePath": "/mock-employee-api",
    "paths": {
        "/employees": {
            "description": "Base endpoint for managing and listing the employees",
            "get": {
                "tags": [
                    "Employee"
                ],
                "summary": "Get a list of all employees in the mock employee api",
                "description": "Returns a list of all employees stored in the database",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "limit",
                        "type": "QUERY",
                        "description": "Limits the listed employees"
                    }
                ],
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "List of all employees",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Successfully retrieved employees.\",\n    \"employees\": [\n        {\n            \"firstName\": \"Terrance\",\n            \"lastName\": \"Follitt\",\n            \"email\": \"tfollittg@mlb.com\",\n            \"phoneNumber\": \"tfollittg@opensource.org\",\n            \"jobTitle\": \"Electrical Engineer\",\n            \"jobDescription\": \"Support\",\n            \"jobSalary\": 422.45,\n            \"employmentHireDate\": 1540080000000,\n            \"employmentStartDate\": 1575331200000,\n            \"employmentEndDate\": 1578528000000,\n            \"id\": \"26960f80-e611-4d43-931d-6f76c6cdf5ff\"\n        },\n        {\n            \"firstName\": \"Harland\",\n            \"lastName\": \"Digwood\",\n            \"email\": \"hdigwood1@un.org\",\n            \"phoneNumber\": \"hdigwood1@youku.com\",\n            \"jobTitle\": \"Compensation Analyst\",\n            \"jobDescription\": \"Business Development\",\n            \"jobSalary\": 525.77,\n            \"employmentHireDate\": 1540080000000,\n            \"employmentStartDate\": 1575331200000,\n            \"employmentEndDate\": 1584576000000,\n            \"id\": \"296a9110-0e7d-4f3b-8166-19be883b353d\"\n        }\n    ]\n}"
                        }
                    },
                    "500": {
                        "body": "exception",
                        "description": "If the server encountered an error while processing the request",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.employee.api.controller.GetEmployees",
                "responseCodeField": "responseCode"
            },
            "post": {
                "tags": [
                    "Employee"
                ],
                "summary": "Creates a new employee record in the mock employee api",
                "description": "Adds an employee to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "bodyParameter": {
                    "name": "employee",
                    "description": "employee"
                },
                "responses": {
                    "201": {
                        "body": "response",
                        "description": "Message returned when a employee is successfully added",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Successfully added employee.\",\n    \"employees\": {\n        \"firstName\": \"Terrance\",\n        \"lastName\": \"Follitt\",\n        \"email\": \"tfollittg@mlb.com\",\n        \"phoneNumber\": \"tfollittg@opensource.org\",\n        \"jobTitle\": \"Electrical Engineer\",\n        \"jobDescription\": \"Support\",\n        \"jobSalary\": 422.45,\n        \"employmentHireDate\": 1540080000000,\n        \"employmentStartDate\": 1575331200000,\n        \"employmentEndDate\": 1578528000000,\n        \"id\": \"26960f80-e611-4d43-931d-6f76c6cdf5ff\"\n    }\n}"
                        }
                    },
                    "400": {
                        "body": "exception",
                        "description": "If the employee failed to be created",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 400,\n    \"message\": \"Failed to create employee. Check Martini logs for more details.\"\n}"
                        }
                    },
                    "500": {
                        "body": "exception",
                        "description": "If the server encounters an exception while processing the request",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.employee.api.controller.AddEmployee",
                "responseCodeField": "responseCode"
            }
        },
        "/employees/{employeeId}": {
            "description": "Endpoint for managing and fetching a employees",
            "get": {
                "tags": [
                    "Employee"
                ],
                "summary": "Retrieve a single employee record in the mock employee api",
                "description": "Returns a single employee",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "employeeId",
                        "type": "PATH",
                        "description": "The ID of the employee to find"
                    }
                ],
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "Represents a employee",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Successfully fetched employee with id 26960f80-e611-4d43-931d-6f76c6cdf5ff.\",\n    \"employees\": {\n        \"firstName\": \"Terrance\",\n        \"lastName\": \"Follitt\",\n        \"email\": \"tfollittg@mlb.com\",\n        \"phoneNumber\": \"tfollittg@opensource.org\",\n        \"jobTitle\": \"Electrical Engineer\",\n        \"jobDescription\": \"Support\",\n        \"jobSalary\": 422.45,\n        \"employmentHireDate\": 1540080000000,\n        \"employmentStartDate\": 1575331200000,\n        \"employmentEndDate\": 1578528000000,\n        \"id\": \"26960f80-e611-4d43-931d-6f76c6cdf5ff\"\n    }\n}"
                        }
                    },
                    "404": {
                        "body": "exception",
                        "description": "Message returned when a employee requested is not existing",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 404,\n    \"message\": \"Employee with id 26960f80-e611-4d43-931d-6f76c6cdf5ff doesn't exist.\"\n}"
                        }
                    },
                    "500": {
                        "body": "exception",
                        "description": "If the server encountered an exception while processing the request",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 5000,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.employee.api.controller.GetEmployee",
                "responseCodeField": "responseCode"
            },
            "delete": {
                "tags": [
                    "Employee"
                ],
                "summary": "Removes an employee record to mock employee api",
                "description": "Deletes a single employee",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "employeeId",
                        "type": "PATH",
                        "description": "The ID of the employee to delete"
                    }
                ],
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "Message returned when a employee is successfully deleted",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Employee with id 26960f80-e611-4d43-931d-6f76c6cdf5ff has been deleted.\"\n}"
                        }
                    },
                    "404": {
                        "body": "exception",
                        "description": "Message returned when a employee requested is not existing",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"httpErrorcode\": 500,\n    \"message\": \"Employee with id 26960f80-e611-4d43-931d-6f76c6cdf5ff doesn't exist.\"\n}"
                        }
                    },
                    "500": {
                        "body": "exception",
                        "description": "When the server encounters an exception while processing the request",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.employee.api.controller.DeleteEmployee",
                "responseCodeField": "responseCode"
            },
            "patch": {
                "tags": [
                    "Employee"
                ],
                "summary": "Updates an employee record in the mock employee api",
                "description": "Updates a single employee",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "employeeId",
                        "type": "PATH",
                        "description": "The ID of the employee to updated"
                    }
                ],
                "bodyParameter": {
                    "name": "employee",
                    "description": "employee"
                },
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "The updated employee values",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Employee with id 26960f80-e611-4d43-931d-6f76c6cdf5ff has been updated.\",\n    \"employees\": {\n        \"firstName\": \"Terrance\",\n        \"lastName\": \"Follitt\",\n        \"email\": \"tfollittg@mlb.com\",\n        \"phoneNumber\": \"tfollittg@opensource.org\",\n        \"jobTitle\": \"Electrical Engineer\",\n        \"jobDescription\": \"Support\",\n        \"jobSalary\": 422.45,\n        \"employmentHireDate\": 1540080000000,\n        \"employmentStartDate\": 1575331200000,\n        \"employmentEndDate\": 1578528000000,\n        \"id\": \"26960f80-e611-4d43-931d-6f76c6cdf5ff\"\n    }\n}"
                        }
                    },
                    "404": {
                        "body": "exception",
                        "description": "Message returned when a employee requested is not existing",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 404,\n    \"message\": \"Employee with id 26960f80-e611-4d43-931d-6f76c6cdf5ff doesn't exist.\"\n}"
                        }
                    },
                    "500": {
                        "body": "exception",
                        "description": "If the server encountered an exception while processing the request.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.employee.api.controller.UpdateEmployee",
                "responseCodeField": "responseCode"
            }
        }
    },
    "tags": [
        {
            "name": "Employee",
            "description": "The API for managing and listing employees.",
            "externalDocumentation": {
                "url": "https://docs.torocloud.com/",
                "description": "The documentation site of Martini."
            }
        }
    ],
    "externalDocumentation": {
        "url": "http://example.com",
        "description": "This is a non-production employees REST API server, it aims to be used for mocking or testing APIs. "
    }
}